"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5)6=5ug($4wsrgzgnb_82h(1x7gpu(9kzm543hjw81(sl$g^mc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'relationship_app',
    'bookshelf',
    'csp',  # Content Security Policy app for enhanced security
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',  # Middleware for Content Security Policy
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            # You can leave other details blank here, as they will be overridden
            # by settings_local.py. The key is that 'ENGINE' MUST be present here.
        }
    }

    # This import MUST be at the very end of your settings.py file
try:
        from .settings_local import *
except ImportError:
        # This block is executed if settings_local.py is not found.
        # You might want to print a warning or handle default values for production.
        print("Warning: settings_local.py not found or could not be imported. Ensure sensitive settings are configured.")
        pass

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/relationship_app/login_success/' # URL to redirect to after successful login
LOGOUT_REDIRECT_URL = '/relationship_app/logged_out/' # URL to redirect to after successful logout

AUTH_USER_MODEL = 'bookshelf.CustomUser'

SECURE_BROWSER_XSS_FILTER = True # Enables XSS filter in older browsers (modern browsers have built-in)
X_FRAME_OPTIONS = 'DENY' # Prevents clickjacking by disallowing embedding in iframes
SECURE_CONTENT_TYPE_NOSNIFF = True # Prevents browsers from MIME-sniffing content type

# 3. Enforce secure cookies over HTTPS
# These should be True in production when serving over HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Optional: If you are serving over HTTPS and want to enforce HSTS (HTTP Strict Transport Security)
# SECURE_HSTS_SECONDS = 31536000 # 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True # Only if you want to apply for HSTS preload list

# Optional: Redirect all HTTP requests to HTTPS (requires SECURE_SSL_REDIRECT = True)
# SECURE_SSL_REDIRECT = True
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') # If behind a proxy/load balancer

# Content Security Policy (CSP) settings
CSP_DEFAULT_SRC = ("'self'",) # Allow content from same origin
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'",) # Allow inline scripts (often needed for Django forms/admin)
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'",) # Allow inline styles
CSP_IMG_SRC = ("'self'", "data:",) # Allow images from self and data URIs (e.g., for base64 images)
CSP_FONT_SRC = ("'self'",)
CSP_CONNECT_SRC = ("'self'",)
CSP_FRAME_ANCESTORS = ("'self'",) # Controls embedding of your site in iframes
# Add other directives as needed, e.g., for external fonts, analytics, CDN scripts etc.
# CSP_REPORT_URI = '/csp-report/' # Optional: URL to send violation reports
# CSP_REPORT_ONLY = DEBUG # Set to True in development to only report violations, not block
